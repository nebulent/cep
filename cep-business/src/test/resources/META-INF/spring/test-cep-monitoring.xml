<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:oxm="http://www.springframework.org/schema/oxm"
	xsi:schemaLocation="
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
            http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
            http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-3.0.xsd">
	
	<!-- Monitor definition loader from XML document. -->
	<bean id="monitorDefinitionStore" class="com.nebulent.cep.monitoring.XMLMonitorDefinitionsStore" init-method="init">
		<property name="unmarshaller" ref="marshaller"/>
		<property name="monitorDefinitionsResource" value="classpath:/META-INF/test-monitor-definitions.xml"/>
	</bean>
	
	<!-- Takes monitor expression and parameters and collects all the necessary info for further evaluation. -->
	<bean id="monitorConditionCompiler" class="com.nebulent.cep.monitoring.esper.statement.FreemarkerMonitorConditionCompiler">
		<property name="unmarshaller" ref="marshaller"/>
		<property name="monitorDefinitionStore" ref="monitorDefinitionStore"/>
	</bean>
	
	<!-- Freemarker utility to execute templates. -->
	<bean id="freemarkerTemplateTransformer" class="com.nebulent.cep.monitoring.utils.transformers.FreemarkerTemplateTransformer" autowire="byName"/>
	
	<!-- Takes monitor expression and executes it as Freemarker expression, producing EPL query. -->
	<bean id="freemarkerMonitorConditionEvaluator" class="com.nebulent.cep.monitoring.esper.statement.FreemarkerMonitorConditionEvaluator">
		<property name="templateTransformer" ref="freemarkerTemplateTransformer" />
	</bean>
	
	<!-- Load all monitor-related data from database. -->
    <bean id="databaseStatementLoader" class="com.nebulent.cep.monitoring.esper.statement.DatabaseActiveMonitorStatementLoader">
        <property name="monitorRepository" ref="monitorRepository" />
        <property name="monitorConditionCompiler" ref="monitorConditionCompiler" />
        <property name="monitorConditionEvaluator" ref="freemarkerMonitorConditionEvaluator" />
    </bean>
    
	<!-- Initializes all the monitors. -->
	<bean id="monitorEngine" class="com.nebulent.cep.monitoring.EsperMonitorEngine" init-method="init" autowire="byName">
		<property name="statementLoader" ref="databaseStatementLoader" />
	</bean>
	
	<!-- Esper listener that brings back results of event processing. -->
    <bean id="updateListener" class="com.nebulent.cep.monitoring.esper.listener.NebulentStatementAwareUpdateListener" autowire="byName">
    	<property name="messageBuilder" ref="freemarkerTemplateTransformer"/>
    </bean>

	<!-- Esper API wrapper. -->
    <bean id="esperBean" class="com.nebulent.cep.monitoring.esper.EsperBean" destroy-method="destroy">
        <property name="name" value="${esperBean.name}" />
        <property name="eventTypeAutoNamePackageName" value="${esperBean.eventTypeAutoNamePackageName}" />
        <property name="annotationPackageName" value="${esperBean.annotationPackageName}" />
        <property name="listeners">
            <list>
                <ref bean="updateListener" />
            </list>
        </property>
    </bean>
    
	<!--
	
	<bean id="eventProcessor" class="com.nebulent.cep.monitoring.monitor.service.impl.CamelEventProcessor">
		<property name="camelContext" ref="camelContext"/>
		<property name="destination" value="direct:bam-queue"/>
	</bean>
	
	-->
	
	
    <!--bean id="generatorCore" class="com.nebulent.cep.monitoring.monitor.generator.GeneratorCore" init-method="init" destroy-method="destroy">
        <property name="messageSender" ref="messageSender" />
        <property name="marshaller" ref="jaxb2Marshaller" />
    </bean-->

    <!--amq:broker id="broker" useJmx="false" persistent="false">
        <amq:transportConnectors>
            <amq:transportConnector uri="vm://localhost" />
        </amq:transportConnectors>
    </amq:broker-->


    <!--amq:connectionFactory id="connectionFactory" brokerURL="vm://localhost" /-->

    <!--amq:queue id="testQueue" physicalName="bam.test" /-->

    <!--bean id="testJmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="connectionFactory" />
        <property name="defaultDestination" ref="testQueue" />
    </bean-->

    <!--bean id="messageSender" class="com.nebulent.cep.monitoring.monitor.generator.jms.MessageSender">
        <property name="jmsTemplate" ref="testJmsTemplate" />
        <property name="destination" ref="testQueue" />
    </bean-->
</beans>